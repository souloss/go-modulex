// Code generated by "stringer -type=ErrorCode -linecomment"; DO NOT EDIT.

package errors

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Success-0]
	_ = x[ErrUndefined-1001000]
	_ = x[ErrSystemInternal-1001001]
	_ = x[ErrSystemDatabase-1001002]
	_ = x[ErrSystemCache-1001003]
	_ = x[ErrSystemTimeout-1001004]
	_ = x[ErrSystemDependency-1001005]
	_ = x[ErrInvalidInput-2002001]
	_ = x[ErrUnauthorized-2002002]
	_ = x[ErrForbidden-2002003]
	_ = x[ErrResourceNotFound-2002004]
	_ = x[ErrResourceAlreadyExists-2002005]
	_ = x[ErrBusinessLogicFailure-2002006]
}

const (
	_ErrorCode_name_0 = "操作成功"
	_ErrorCode_name_1 = "{{ .error }}系统内部错误，例如服务崩溃、未知异常数据库操作失败，如连接失败、查询异常等缓存操作失败，比如 Redis 连接失败系统请求超时，比如网络延迟或依赖服务未响应依赖服务错误，通常指外部服务、微服务依赖等"
	_ErrorCode_name_2 = "输入参数错误，常用于接口参数验证失败未授权，通常表示用户未登录或认证失败权限不足，用户登录了但没有执行此操作的权限资源未找到，如查询数据库时 ID 不存在的情况资源已存在，通常用于创建已存在的唯一资源一般的业务逻辑处理失败，比如订单处理异常"
)

var (
	_ErrorCode_index_1 = [...]uint16{0, 12, 66, 123, 169, 232, 295}
	_ErrorCode_index_2 = [...]uint16{0, 54, 108, 171, 232, 292, 352}
)

func (i ErrorCode) String() string {
	switch {
	case i == 0:
		return _ErrorCode_name_0
	case 1001000 <= i && i <= 1001005:
		i -= 1001000
		return _ErrorCode_name_1[_ErrorCode_index_1[i]:_ErrorCode_index_1[i+1]]
	case 2002001 <= i && i <= 2002006:
		i -= 2002001
		return _ErrorCode_name_2[_ErrorCode_index_2[i]:_ErrorCode_index_2[i+1]]
	default:
		return "ErrorCode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
